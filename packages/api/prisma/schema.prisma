// generator client {
//   provider = "prisma-client-js"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id            String          @id
  name          String
  users         UserAccount[]
  Monitor       Monitor[]
  MonitorResult MonitorResult[]
  MonEnv        MonEnv[]
  notifications Notification[]
}

model UserAccount {
  id        String  @id
  userId    String
  email     String
  role      String  @default("")
  default   Boolean @default(true)
  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  @@unique([userId, accountId])
}

model MonEnv {
  id        String  @id @default(cuid())
  name      String
  account   Account @relation(fields: [accountId], references: [id])
  accountId String
  env       Json

  @@unique([name, accountId])
}

// model EnvVariable {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   key       String
//   value     String
//   meta      String

//   envId String
//   env   MonEnv @relation(fields: [envId], references: [id])

//   @@unique([key, envId])
//   Account   Account? @relation(fields: [accountId], references: [id])
//   accountId String?
// }

model Monitor {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  // updatedAt       DateTime        @default(now()) @updatedAt
  name            String
  status          String          @default("active")
  url             String
  method          String          @default("GET") // GET/POST/HEAD/PUT/DELETE
  frequency       Int
  // text/plain, application/json, text/xml, text/html, application/x-www-form-urlencoded or none
  bodyType        String?         @default("")
  body            String?
  auth            Json            @default("{}")
  headers         Json            @default("[]")
  queryParams     Json            @default("[]")
  cookies         String?
  followRedirects Int?            @default(0)
  timeout         Int?            @default(30) //30 seconds
  locations       String[]
  monitorResults  MonitorResult[]
  assertions      Json            @default("[]") // custom syntax
  notifications   Json            @default("{}") // custom syntax
  notifyEmail     String?
  env             Json            @default("[]") // custom syntax
  account         Account         @relation(fields: [accountId], references: [id])
  accountId       String

  @@unique([name, accountId])
}

model MonitorResult {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime @default(now())
  err            String
  headers        Json     @default("[]")
  url            String
  ip             String
  location       String
  body           String
  bodySize       Int
  code           Int
  codeStatus     String
  protocol       String
  waitTime       Int
  dnsTime        Int
  tcpTime        Int
  tlsTime        Int
  uploadTime     Int
  ttfb           Int
  downloadTime   Int
  totalTime      Int
  certExpiryDays Int
  certCommonName String
  assertResults  Json     @default("[]")

  monitor   Monitor @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  account   Account @relation(fields: [accountId], references: [id])
  monitorId String // relation scalar field  (used in the `@relation` attribute above)
  accountId String
}

model Notification {
  id                      String    @id @default(cuid())
  createdAt               DateTime  @default(now())
  name                    String
  failCount               Int       @default(1)
  failTimeMS              Int?
  isDefaultEnabled        Boolean   @default(false)
  applyOnExistingMonitors Boolean   @default(false)
  channel                 Json      @default("{}")
  account   Account @relation(fields: [accountId], references: [id])
  accountId               String

  @@unique([name, accountId])
}
