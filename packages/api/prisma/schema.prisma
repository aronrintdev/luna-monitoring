// generator client {
//   provider = "prisma-client-js"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String                @id
  name              String                @unique
  users             UserAccount[]
  Monitor           Monitor[]
  MonitorResult     MonitorResult[]
  MonEnv            MonEnv[]
  notifications     NotificationChannel[]
  settings          Settings[]
  NotificationState NotificationState[]
  NotificationEmail NotificationEmail[]
  StatusPage        StatusPage[]
}

model UserAccount {
  id        String  @id
  userId    String
  email     String
  role      String  @default("")
  default   Boolean @default(true)
  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  @@unique([userId, accountId])
}

model MonEnv {
  id        String  @id @default(cuid())
  name      String
  account   Account @relation(fields: [accountId], references: [id])
  accountId String
  env       Json

  @@unique([name, accountId])
}

model Monitor {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  // updatedAt       DateTime        @default(now()) @updatedAt
  name            String
  status          String          @default("active")
  url             String
  method          String          @default("GET") // GET/POST/HEAD/PUT/DELETE
  frequency       Int
  // text/plain, application/json, text/xml, text/html, application/x-www-form-urlencoded or none
  bodyType        String?         @default("")
  body            String?
  auth            Json            @default("{}")
  preScript       String          @default("")
  headers         Json            @default("[]")
  queryParams     Json            @default("[]")
  cookies         String?
  followRedirects Int?            @default(0)
  timeout         Int?            @default(30) //30 seconds
  locations       String[]
  monitorResults  MonitorResult[]
  assertions      Json            @default("[]") // custom syntax
  notifications   Json            @default("{}") // custom syntax
  notifyEmail     String?
  env             Json            @default("[]") // custom syntax
  account         Account         @relation(fields: [accountId], references: [id])
  accountId       String

  NotificationState NotificationState[]
  @@unique([name, accountId])
}

model MonitorResult {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime @default(now())
  err            String
  headers        Json     @default("[]")
  url            String
  ip             String
  location       String
  body           String
  bodySize       Int
  code           Int
  codeStatus     String
  protocol       String
  waitTime       Int
  dnsTime        Int
  tcpTime        Int
  tlsTime        Int
  uploadTime     Int
  ttfb           Int
  downloadTime   Int
  totalTime      Int
  certExpiryDays Int
  certCommonName String
  assertResults  Json     @default("[]")

  monitor           Monitor             @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  account           Account             @relation(fields: [accountId], references: [id])
  monitorId         String // relation scalar field  (used in the `@relation` attribute above)
  accountId         String
  NotificationState NotificationState[]
}

model NotificationChannel {
  id                      String   @id @default(cuid())
  createdAt               DateTime @default(now())
  name                    String
  isDefaultEnabled        Boolean  @default(false)
  applyOnExistingMonitors Boolean  @default(false)
  channel                 Json     @default("{}")
  account                 Account  @relation(fields: [accountId], references: [id])
  accountId               String

  @@unique([name, accountId])
}

model NotificationState {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime       @default(now())
  account   Account        @relation(fields: [accountId], references: [id])
  accountId String
  monitor   Monitor        @relation(fields: [monitorId], references: [id])
  monitorId String
  state     String         @default("")
  message   String         @default("")
  Result    MonitorResult? @relation(fields: [resultId], references: [id])
  resultId  String?        @db.Uuid
}

model Settings {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  alert     Json     @default("{}")
  account   Account  @relation(fields: [accountId], references: [id])
  accountId String

  @@unique([accountId])
}

model NotificationEmail {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  email      String
  token      String?
  isVerified Boolean  @default(false)
  account    Account  @relation(fields: [accountId], references: [id])
  accountId  String

  @@unique([email])
}

model StatusPage {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  logoUrl    String
  name       String
  url        String
  monitors   String[]
  account    Account  @relation(fields: [accountId], references: [id])
  accountId  String

  @@unique([name, accountId])
}
