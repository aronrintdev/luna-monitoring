// generator client {
//   provider = "prisma-client-js"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id               String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime              @default(now())
  name             String                @default("")
  owner            String
  stripeCustomerId String?
  users            UserAccount[]
  Monitor          Monitor[]
  MonitorResult    MonitorResult[]
  MonEnv           MonEnv[]
  notifications    NotificationChannel[]
  settings         Settings[]
  ActivityLog      ActivityLog[]
  StatusPage       StatusPage[]
  BillingInfo      BillingInfo[]

  // this constraint helps to avoid race condition in creating an account.
  @@unique([name, owner])
}

model UserAccount {
  id            String    @id
  createdAt     DateTime  @default(now())
  userId        String?   @default("")
  email         String
  role          String    @default("")
  isPrimary     Boolean   @default(false)
  isVerified    Boolean   @default(false)
  token         String?
  tokenExpiryAt DateTime?
  account       Account   @relation(fields: [accountId], references: [id])
  accountId     String    @db.Uuid

  @@unique([email, accountId])
  @@index([userId])
}

model MonEnv {
  id        String  @id @default(cuid())
  name      String
  account   Account @relation(fields: [accountId], references: [id])
  accountId String  @db.Uuid
  env       Json

  @@unique([name, accountId])
}

model Monitor {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
  name            String
  status          String          @default("active")
  url             String
  method          String          @default("GET") // GET/POST/HEAD/PUT/DELETE
  frequency       Int
  // text/plain, application/json, text/xml, text/html, application/x-www-form-urlencoded or none
  bodyType        String?         @default("")
  body            String          @default("")
  auth            Json            @default("{}")
  preScript       String          @default("")
  headers         Json            @default("[]")
  queryParams     Json            @default("[]")
  cookies         String?
  followRedirects Int?            @default(0)
  timeout         Int?            @default(30) //30 seconds
  locations       String[]        @default([])
  assertions      Json            @default("[]") // custom syntax
  notifications   Json            @default("{}") // custom syntax
  notifyEmail     String?
  environments    String[]        @default([]) // array
  variables       Json            @default("[]") // custom syntax
  account         Account         @relation(fields: [accountId], references: [id])
  accountId       String          @db.Uuid
  monitorResults  MonitorResult[]
  ActivityLog     ActivityLog[]

  @@unique([accountId, name])
  @@index([createdAt], type: Brin)
  @@index([accountId])
}

model MonitorResult {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime @default(now())
  err            String
  headers        Json     @default("[]")
  url            String
  ip             String
  location       String
  body           String
  bodySize       Int
  code           Int
  protocol       String
  waitTime       Int
  dnsTime        Int
  tcpTime        Int
  tlsTime        Int
  uploadTime     Int
  ttfb           Int
  downloadTime   Int
  totalTime      Int
  certExpiryDays Int
  certCommonName String
  assertResults  Json     @default("[]")

  monitor     Monitor       @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  account     Account       @relation(fields: [accountId], references: [id])
  monitorId   String        @db.Uuid // relation scalar field  (used in the `@relation` attribute above)
  accountId   String        @db.Uuid
  ActivityLog ActivityLog[]

  @@index([createdAt], type: Brin)
  @@index([monitorId])
  @@index([accountId])
}

model OndemandResult {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime @default(now())
  err            String
  headers        Json     @default("[]")
  url            String
  ip             String
  location       String
  body           String
  bodySize       Int
  code           Int
  protocol       String
  waitTime       Int
  dnsTime        Int
  tcpTime        Int
  tlsTime        Int
  uploadTime     Int
  ttfb           Int
  downloadTime   Int
  totalTime      Int
  certExpiryDays Int
  certCommonName String
  assertResults  Json     @default("[]")

  monitorId String @db.Uuid
  accountId String @db.Uuid

  @@index([accountId])
}

model NotificationChannel {
  id                      String   @id @default(cuid())
  createdAt               DateTime @default(now())
  name                    String
  isDefaultEnabled        Boolean  @default(false)
  applyOnExistingMonitors Boolean  @default(false)
  channel                 Json     @default("{}")
  account                 Account  @relation(fields: [accountId], references: [id])
  accountId               String   @db.Uuid

  @@unique([accountId, name])
  @@index([accountId])
}

model ActivityLog {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime       @default(now())
  accountId String         @db.Uuid
  monitorId String?        @db.Uuid
  resultId  String?        @db.Uuid
  state     String         @default("")
  type      String         @default("")
  data      Json           @default("{}")
  monitor   Monitor?       @relation(fields: [monitorId], references: [id])
  Result    MonitorResult? @relation(fields: [resultId], references: [id])
  Account   Account        @relation(fields: [accountId], references: [id])

  @@index([createdAt], type: Brin)
  @@index([accountId])
}

model Settings {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  alert     Json     @default("{}")
  uiState   Json     @default("{}")
  account   Account  @relation(fields: [accountId], references: [id])
  accountId String   @db.Uuid

  @@unique([accountId])
}

model StatusPage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  logoUrl   String
  name      String
  monitors  String[]
  account   Account  @relation(fields: [accountId], references: [id])
  accountId String   @db.Uuid

  @@unique([accountId])
}

model BillingInfo {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  billingPlanType  String
  monitorRunsLimit Int?
  account          Account  @relation(fields: [accountId], references: [id])
  accountId        String   @db.Uuid

  // CreatedAt Brin index is not created as entry count is minimal
  @@index([accountId])
}

model ApiKey {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  hash      String
  tag       String
  userId    String

  // APiKey is per user and not per account.  Hence, no accountId column

  @@unique([name, userId])
}
